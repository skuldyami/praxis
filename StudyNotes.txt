Codecademy: Data Science
========================
1.1) Introduction to Data Science:
  -SQL
  -Python: pandas, matplotlib
  -Jupyter Notebook
  -A/B Tests: significance
  -Python is an interpreted high-level programming language for general-purpose programming
1.2) Introduction to SQL:
  -SQL: Structured Query Language
  -RDBMS: Relational Database Management System
  -CREATE TABLE table_name (
      column_1 data_type, 
      column_2 data_type, 
      column_3 data_type
  );
  -INSERT INTO celebs (id, name, age) 
  VALUES (1, 'Justin Bieber', 21);
  -SELECT name FROM celebs;
  -SELECT * FROM celebs;
  -UPDATE celebs
  SET age = 22
  WHERE id = 1;
  -ALTER TABLE celebs 
  ADD COLUMN twitter_handle TEXT;
  -NULL: a special value in SQL that represents missing or unknown data.
  -DELETE FROM celebs 
  WHERE twitter_handle IS NULL;
  -Constraints that add information about how a column can be used are invoked after specifying the data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a certain restriction.
  CREATE TABLE celebs (
      id INTEGER PRIMARY KEY, 
      name TEXT UNIQUE,
      date_of_birth TEXT NOT NULL,
      date_of_death TEXT DEFAULT 'Not Applicable',
  );
2.1) Writing Queries
  -SELECT DISTINCT year
       FROM movies;
  -SELECT *
      FROM movies
  WHERE imdb_rating<5;
  
  -SELECT * 
    FROM movies
  WHERE name LIKE 'Se_en';
  -The _ means you can substitute any individual character here without breaking the pattern.
  -SELECT * 
    FROM movies
  WHERE name LIKE 'A%';
  -% is a wildcard character that matches zero or more missing letters in the pattern.
  -SELECT name
      FROM movies
  WHERE imdb_rating IS NULL;
  -It is not possible to test for NULL values with comparison operators, such as = and !=. Instead, we will have to use these operators: IS NULL and IS NOT NULL
  -SELECT *
    FROM movies
  WHERE name BETWEEN 'A' AND 'J';
  -BETWEEN two letters is not inclusive of the 2nd letter.
  -BETWEEN two numbers is inclusive of the 2nd number.
  -SELECT *
     FROM movies
   WHERE imdb_rating > 8
   ORDER BY year DESC;
  -ORDER BY is a clause that indicates you want to sort the result set by a particular column.
3.1) Aggregate Functions:
  -SELECT COUNT(*)
     FROM table_name;
  -SELECT SUM(downloads)
       FROM fake_apps;
  -SELECT MAX(downloads)
       FROM fake_apps;
  -SELECT MIN(downloads)
      FROM fake_apps;
  -SELECT AVG(price)
    FROM fake_apps;
  -SELECT ROUND(AVG(price), 2)
      FROM fake_apps;
  -SELECT price, COUNT(downloads)
       FROM fake_apps
   GROUP BY price;
  -SELECT category, 
      SUM(downloads)
       FROM fake_apps
  GROUP BY category;
  -SELECT ROUND(imdb_rating),
        COUNT(name)
     FROM movies
  GROUP BY 1
   ORDER BY 1;
  -SELECT year,
        genre,
        COUNT(name)
    FROM movies
  GROUP BY 1, 2
      HAVING COUNT(name) > 10;
  -Use HAVING when limiting the results of a query based on an aggregate property: filter groups.
2.2) Multiple Tables
  -INNER JOIN: will combine rows from different tables if the join condition is true.
    SELECT *
    FROM orders
    JOIN customers
      ON orders.customer_id = customers.customer_id;
  -LEFT JOIN: will return every row in the left table, and if the join condition is not met, NULL values are used to fill in the columns from the right table.
    SELECT *
    FROM table1
    LEFT JOIN table2
          ON table1.c2 = table2.c2;
  -PRIMARY KEY: a column that uniquely identifies each row of that table.
  -FOREIGN KEY: a column that contains the primary key to another table.
  -CROSS JOIN: combine all rows of one table with all rows of another table. Notice that cross joins don't require an ON statement. You're not really joining on any columns!
A more common usage of CROSS JOIN is when we need to compare each row of a table to a list of values.
    SELECT shirts.shirt_color,
          pants.pants_color
    FROM shirts
    CROSS JOIN pants;
  -UNION: Sometimes we just want to stack one dataset on top of the other. 1) Same number of columns. 2) Same datatype in the same order as the first table.
    SELECT *
    FROM table1
    UNION
    SELECT *
    FROM table2;
  -WITH: Often times, we want to combine two tables, but one of the tables is the result of another calculation.
    WITH previous_results AS (
      SELECT ...
      ...
      ...
      ...
    )
    SELECT *
    FROM previous_results
    JOIN customers
      ON _____ = _____;
4.1) Python: Introduction
  -Comments: #
  -print("Hello Sekai!")
  -Strings: "Kurama" or 'Kurama'
  -Variables: message_string = "Hola"
  -Errors: SyntaxError, NameError, IndexError, ZeroDivisionError
  -Numbers: int, float, complex
    num_int= 8
    num_float=7.36
    num_complex=4.2j
  -Math operations: PEMDAS, 左 - ->右
  -Exponents: **| 6**3= 6^3
  -Modulo: The modulo (%) operator is useful in programming when we want to perform an action every nth-time the code is run.
  -Multi-line strings/comments: """comment""" or '''comment'''
    "If a multi-line string isn't assigned a variable or used in an expression it is treated as a comment."
4.2) Python Functions:
      -Syntax:
          def function_name():
            some_code
      -Keyword arguments: assigned explicitly in the function definition
         def create_spreadsheet(title, row_count=1000):
             print("Creating a spreadsheet called "+title+" with "+str(row_count)+" rows")
         create_spreadsheet("Downloads")
         create_spreadsheet("Applications", row_count=10)
                "Creating a spreadsheet called Downloads with 1000 rows"
                "Creating a spreadsheet called Applications with 10 rows"
       -Multiple returns:
           def square_point(x_value, y_value):
              x_2 = x_value * x_value
              y_2 = y_value * y_value
              return x_2, y_2
           x_squared, y_squared = square_point(1, 3)
       -Scope: Places in code where the variable is defined (can be used)

4.3) Python Control Flow:
  -Boolean Expressions: True or False
  -Relational Operators: ==, !=, >, <, >=, <=
  -if condition: 
        statement_if
    elif (condition_elif):
      statement_elif
    else:
            statement_else
  -Boolean operators: and, or, not
  -Exceptions/Error control:
    try:
      # some statement
    except ErrorName:
      # some statement
    def divides(a,b):
        try:
            result = a / b
            print (result)
        except ZeroDivisionError:
            print ("Can't divide by zero!")

5.2) Python Loops
  -For Loop: lets us perform an action on each item in a list.
  for <temporary variable> in <list variable>:
    <action>
  -Break: When the program hits a break statement, control returns to the code outside of the for loop.
  for item in items_on_sale:
  if item == "knit_dress":
    print("Knit Dress is on sale!")
    break
  -Continue: moves the index to the next value in the list, without executing the code in the rest of the loop.
  ages = [12, 38, 34, 26, 21, 19, 67, 41, 17]
  for age in ages:
    if age < 21:
      continue
    print(age)
  -While: The while loop performs a set of code until some condition is reached.
  index = 0
  while index < len(dog_breeds):
    print(dog_breeds[index])
    index += 1
  -List Comprehensions: 
  words = ["@coolguy35", "#nofilter", "@kewldawg54", "reply", "timestamp", "@matchamom", "follow", "#updog"]
  usernames = [word for word in words if word[0] == '@']
  ["@coolguy35", "@kewldawg54", "@matchamom"]
  

Codecademy: Python
==================
1.3) Conditionals and Control flow:
  - not is evaluated first;
    and is evaluated next;
    or is evaluated last.
  -Input:
  name = input("What's your name?")
  print(name)
  -String formating:
  area=3.14159*radius**2
  print("Circle area: {}".format(area))
  -Imports:
    Generic:
      import math
      print(math.sqrt(25))
    Function:
      from math import sqrt
      print(sqrt(25))
    Universal:
      from math import *
      print(pi)

1.4) Lists and Dictionaries:
  -Strings are lists!!:
  animals = "catdogfrog"
  cat = animals[:3]
  >>> cat="cat"
  -index() and insert()
  animals = ["ant", "bat", "cat"]
  print animals.index("bat")
  animals.insert(1, "dog")
  print animals
  -Dictionaries:
  residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}
  print(residents['Sloth'])
  >>> 105
    -Delete value:
    del dict_name[key_name]
    -Associate value:
    dict_name[key]=new_value
  -Remove from list:
  beatles = ["john","paul","george","ringo","stuart"]
  beatles.remove("stuart")  # this modifies the list (no return value) - uses list element
  beatles.pop(1) # uses the index
  -Continuation character:
  The \ character is a continuation character. The following line is considered a continuation of the current line.

1.5) Loops:
  -While/else is similar to if/else, but there is a difference: the else block will execute anytime the loop condition is evaluated to False. 
  -For/else is similar to while/else
    if condition:
      handle_true()
    else:
      handle_false()



PL/SQL Tutorial
===============
  -PL/SQL 
  Procedural language extension for SQL

  -PL/SQL block
  DECLARE
    variable declaration
  BEGIN (mandatory)
    program execution
  EXCEPTION
    Exception reading
  END;

  -PL/SQL Placeholders
    -PL/SQL variables
      variable_name datatype [NOT NULL := value];
      Ex:
      DECLARE
        salary number(4);
        dept varchar2(10) NOT NULL := "HR Dept";  #must be initialized when using NOT NULL
      Assign values:
        1) variable_name := value; #Direct assignment
        2) SELECT column_name      #Database assignment
             INTO variable_name
             FROM table_name
           [WHERE condition];
    -PL/SQL Constants
      constant_name CONSTANT datatype := VALUE;
      DECLARE
        salary_increase CONSTANT number(3) := 17;
    -PL/SQL Records
      Declaring a record:
        TYPE record_type_name IS RECORD         #Define a composite datatype, where each field is scalar.
        (column_name1 datatype,
         column_name2 datatype, ...);
        col_name table_name.column_name%type;   #Dynamically define the datatype of a column based on a database column.
        record_name record_type_name;           #Declare a record based on a user-defined type.
        record_name table_name%ROWTYPE;         #Dynamically declare a record based on an entire row of a table. Each column in the table corresponds to a field in the record.
      Assign values:
        record_name.col_name := value;          #To directly assign a value to a specific column of a record.
        record_name.column_name := value;       #To directly assign a value to a specific column of a record, if the record is declared using %ROWTYPE.
        SELECT col1, col2                       #To assign each field of a record from the database table.
          INTO record_name.col_name1,
               record_name.column_name2
          FROM table_name
        [WHERE clause];
        SELECT *                                #To assign values to all fields in the record from a database table.
          INTO record_name
          FROM table_name
        [WHERE clause];
      Retrieve values:
        variable_name := record_name.col_name;  #To get a value from a record column and assigning it to a variable.

    -PL/SQL Conditional Statements
      IF condition1 THEN
          statement1;
      ELSIF condition2 THEN
          statement2;
      ELSIF condition3 THEN
          statement3;
      ELSE
          statement4;
      END IF;

    -PL/SQL Iterative Statements
      1) Simple LOOP
      2) WHILE LOOP
      3) FOR LOOP

      1) Simple LOOP (repeat-until):
          LOOP
            statements;
            EXIT;       #No repetitions
            {or EXIT WHEN condition}  #most likely the one to be used
          END LOOP;

      2) WHILE LOOP
          WHILE <condition>
            LOOP
              statements
          END LOOP;
          
      3) FOR LOOP
          FOR counter IN val1 .. val2
            LOOP
              statements
          END LOOP;
         for(int i=0; i< size; i=i*3)

    -PL/SQL Cursors:
     "A cursor is a temporary work area created in the system memory when a SQL statement is executed."
     "A cursor contains information on a select statement and the rows of data accessed by it."
      1) Implicit Cursors
          DECLARE
            var_rows NUMBER(5);
          BEGIN
            UPDATE employee
            SET salary:=salary+1000;
            IF SQL%NOTFOUND THEN
              dbms_output.put_line('None of the salaries were updated');
            ELSIF SQL%FOUND THEN
              var_rows:=SQL%ROWCOUNT;
              dbms_output.put_line('Salaries for ' || var_rows || 'employees are updated');
            END IF;
          END;
      2) Explicit Cursors:
          "An explicit cursor is defined in the declaration section of the PL/SQL Block."
          Attributes: %FOUND, %NOTFOUND, %ROWCOUNT, %ISOPEN
          CURSOR cursor_name IS select_statement;

          "General form of using an explicit cursor is:"
          DECLARE
            variables;
            records;
            create a cursor;
          BEGIN
            OPEN cursor;
            FETCH cursor;
              process the records;  #A LOOP can be used here
            CLOSE cursor;
          END;

          "Ex:"
          DECLARE
            emp_rec emp_tbl%rowtype;
            CURSOR emp_cur IS
            SELECT *
            FROM employee
            WHERE salary>10;
          BEGIN
            OPEN emp_cur;
            FETCH emp_cur INTO emp_rec;
              dbms_output.put_line(emp_rec.first_name || " " || emp_rec.last_name);
            CLOSE emp_cur;
          END;

          "General form of using a cursor FOR LOOP:"
          FOR record_name IN cursor_name
          LOOP
            process the row...
          END LOOP;

          "Ex:"
          DECLARE
            CURSOR employees_in_10_cur IS
              SELECT *
              FROM employees
              WHERE department_id=10;
          BEGIN
            FOR employee_rec IN employees_in_10_cur
            LOOP
              DBMS_OUTPUT.PUT_LINE(employee_rec.last_name);
            END LOOP;
          END; 
          "The nice thing about the cursor FOR loop is that ORACLE Database opens the cursor, declares a record by using %ROWTYPE against the cursor, "
          "fetches each row into a record, and then closes the loop when all the rows have been fetched (or the loop terminates for any other reason)."

    -PL/SQL Procedures:
      "General syntax to create a procedure:"
      CREATE [OR REPLACE] PROCEDURE proc_name (list_of_parameters)
      IS                      #Same as DECLARE in anonymous PL/SQL Blocks
        declaration_section
      BEGIN
        execution_section
      EXCEPTION
        exception_section
      END;

      "Ex:"
      CREATE OR REPLACE PROCEDURE employer_details IS
        CURSOR emp_cur IS
          SELECT first_name, last_name, salary
          FROM emp_tbl;
      BEGIN
        FOR emp_rec IN emp_cur
        LOOP
          dbms_output.put_line(emp_cur.first_name || ' ' || emp_cur.last_name || ' ' || emp_cur.salary);
        END LOOP;
      END;

    -PL/SQL Functions:
      "A stored function is a set of PL/SQL statements you can call by name. Stored functions are very similar to procedures, "
      "except that a function return a value to the environment in which it is called. User functions can be used as part of a SQL expression."
      "The major difference between a procedure and a function is, a function must return a value, but a procedure may or may not."

      "General syntax to write a function:"
      CREATE [OR REPLACE] FUNCTION function_name (parameters)
      RETURN return_datatype;   #Any ORACLE datatype: varchar2, number, etc...
      IS
        declaration_section
      BEGIN
        execution_section
        RETURN return_variable;
      EXCEPTION                 #A value must be returned here as well (if this section is included)
        exception_section
        RETURN return_variable;
      END;

    -PL/SQL Parameters in PROCEDURES and FUNCTIONS:
      1) IN
          "IN - is optional, by default it is a IN type parameter."
          "It can be assigned to a variable or be used in a query."
          "READ-ONLY parameter. Its value cannot be changed inside the procedure."
      2) OUT
          "WRITE-ONLY parameter. Pass by 'value' method."
          "A default value cannot be assigned to the OUT parameter."
          "Values can be assigned inside the stored procedure."
      3) IN OUT
          "Values can be passed and returned to the calling program."
          "Procedure and output value must have the same datatype."

    -PL/SQL Exception Handling:
      1) What is Exception Handling?
          "A feature provided by PL/SQL in order to handle Exceptions"
      2) Structure of Exception Handling?
          "General Syntax for coding the exception section: "
          DECLARE
            declaration_section
          BEGIN
            execution_section
          EXCEPTION
            WHEN ex_name1 THEN
              error_handling_statements
            WHEN ex_name2 THEN
              error_handling_statements
            WHEN Others THEN
              error_handling_statements
          END;
      3) Exception Types:
          a) Named System Exceptions:
              "Not declared explicitly"
              "Raised implicitly when a predefined ORACLE error occurs"
              "Ex: CURSOR_ALREADY_OPEN, NO_DATA_FOUND, ZERO_DIVIDE, etc..."
              "Ex:"
              BEGIN
                execution_section
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  dbms_output.put_line('A SELECT...INTO did not return any row.');
              END;
          b) Unnamed System Exceptions:
              ""
          c) User-defined Exceptions: